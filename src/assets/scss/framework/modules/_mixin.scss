@use "sass:math";
// ==========================================================================
//  GLOBAL Mixins
// ==========================================================================

// * Convert font-size from px to rem
// *
// * @param $size - the value in pixel you want to convert
// *
// * e.g. p {@include fontSize(12px);}
// *

@mixin font-rem($font-size, $line-height: 0) {
  font-size: calc($font-size / $baseFontSize) * 1rem;
  @if ($line-height > 0) {
    line-height: calc($line-height / $baseFontSize) * 1rem;
  }
}

// Letter spacing- tracking
@mixin letter-spacing($letter-tracking) {
  letter-spacing: calc($letter-tracking/1000 * 1em);
}

// font clamp
// it should define also the basefontsize: 16px
@function round($number, $decimals: 0) {
  $n: 1;
  @if $decimals > 0 {
    @for $i from 1 through $decimals {
      $n: $n * 10;
    }
  }
  @return math.div(math.round($number * $n), $n);
}

@function px-to-rem($px) {
  $rems: math.div($px, 16px) * 1rem;
  @return $rems;
}
@function fluid($max-size, $min-size, $unit: vw) {
  $slope: math.div($max-size - $min-size, $max-breakpoint - $min-breakpoint);
  $slope-to-unit: $slope * 100;
  // @debug $slope-to-unit;
  $intercept-rem: px-to-rem($min-size - $slope * $min-breakpoint);
  $min-size-rem: px-to-rem($min-size);
  $max-size-rem: px-to-rem($max-size);
  @return clamp(#{$min-size-rem}, #{$slope-to-unit}#{$unit} + #{$intercept-rem}, #{$max-size-rem});
}

// Mixin for fluid font sizing in rem
@mixin font-clamp($max-size, $min-size: $baseFontSize, $line-height: 0) {
  @if ($min-size != $baseFontSize) {
    font-size: fluid($max-size, $min-size);
  } @else {
    font-size: fluid($max-size, $baseFontSize);
  }

  // If line-height is provided, calculate and set it
  @if ($line-height > 0) {
    line-height: calc($line-height / $baseFontSize) * 1rem;
  } @else {
    line-height: normal;
  }
}

// // Usage example:
// .my-text {
//   font-size: #{fluid(16px, 31px, 320px, 960px)};
// }

// * SASS color map function
// *
// * using the function to get an non-map color
// *
// * e.g. body {background-color: color(background)};
// *
// * using the function to get a nested map color
// *
// * h1{color: color(primary, base);}
// *

// retrieve color from $colors map ie. `color(base, primary)`

@function color($color-name, $color-variant: null) {
  // color variant is optional
  @if ($color-variant != null) {
    // map inception
    @return map-get(map-get($colors, $color-name), $color-variant);
  } @else {
    @return map-get($colors, $color-name);
  }
}

// Media query mixin
@mixin bp($query) {
  @if $query == desktop-lg {
    @media (min-width: 1800px) {
      @content;
    }
  } @else if $query == standard-desktop {
    @media (min-width: 992px) and (max-width: 1280px) {
      @content;
    }
  } @else if $query == standard-tablet {
    @media (min-width: 992px) and (max-width: 1025px) {
      @content;
    }
  } @else if $query == custom-mid-size {
    @media (min-width: 992px) and (max-width: 1400px) {
      @content;
    }
  } @else if $query == laptop {
    @media (min-width: 1024px) {
      @content;
    }
  } @else if $query == tablet-md {
    @media (min-width: 992px) {
      @content;
    }
  } @else if $query == tablet-sm {
    @media (max-width: 991px) {
      @content;
    }
  } @else if $query == tablet-strict {
    @media (min-width: 768px) and (max-width: 991px) {
      @content;
    }
  } @else if $query == mobile {
    @media (max-width: 767px) {
      @content;
    }
  } @else if $query == xs {
    @media (max-width: 567px) {
      @content;
    }
  } @else if $query == hover {
    @media (hover: hover) {
      &:hover {
        @content;
      }
    }
  }

  // Hover Usage
  // .test{
  //   color: red;
  //   @include bp(hover){
  //     color: red;
  //   }
  // }

  // for grid system
  @else if $query == xxl {
    @media (min-width: 1920px) {
      @content;
    }
  } @else if $query == xl {
    @media (min-width: 1440px) {
      @content;
    }
  } @else if $query == lg {
    @media (min-width: 1200px) {
      @content;
    }
  } @else if $query == md {
    @media (min-width: 992px) {
      @content;
    }
  } @else if $query == sm {
    @media (min-width: 768px) {
      @content;
    }
  } @else if $query == xs {
    @media (min-width: 567px) {
      @content;
    }
  }
}

// Input placeholder mixin

@mixin input-placeholder {
  &.placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
  &::-webkit-input-placeholder {
    @content;
  }
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}
